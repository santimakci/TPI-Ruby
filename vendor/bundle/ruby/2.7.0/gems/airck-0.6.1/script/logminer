#!/bin/bash

function finalize() {
  echo -e '\033c'
  exit
}
if [[ -f bhvr/relatives/variable ]]
then
  while read line
  do
    evd=${line//=/ }
    evs=($evd)
    evk=${evs[0]}
    eval 'evr=$'$(echo $evk)
    if [[ $evr = '' ]]
    then
      eval $line
    fi
  done < bhvr/relatives/variable
else
  finalize
fi
if [[ -f cfg/definers/extension.rb ]]
then
  logminer_preferred_mode=`grep -o ':logminer_preferred_mode, :set, .*)' cfg/definers/extension.rb | sed 's/:logminer_preferred_mode, :set, //g' | sed 's/)//g'`; logminer_preferred_mode=`echo $logminer_preferred_mode | tr -d '\047' | tr -d '\042'`
  logminer_early_limitation=`grep -o ':logminer_early_limitation, :set, .*)' cfg/definers/extension.rb | sed 's/:logminer_early_limitation, :set, //g' | sed 's/)//g'`; logminer_early_limitation=`echo $logminer_early_limitation | tr -d '\047' | tr -d '\042'`
  logminer_tracking_message=`grep -o ':logminer_tracking_message, :set, .*)' cfg/definers/extension.rb | sed 's/:logminer_tracking_message, :set, //g' | sed 's/)//g'`; logminer_tracking_message=`echo $logminer_tracking_message | tr -d '\047' | tr -d '\042'`
else
  finalize
fi
if [[ -f cfg/fragments/$ENV.rb ]]
then
  fragmented_logminer_preferred_mode=`grep -o ':logminer_preferred_mode, :set, .*)' cfg/fragments/$ENV.rb | sed 's/:logminer_preferred_mode, :set, //g' | sed 's/)//g'`; fragmented_logminer_preferred_mode=`echo $fragmented_logminer_preferred_mode | tr -d '\047' | tr -d '\042'`
  fragmented_logminer_early_limitation=`grep -o ':logminer_early_limitation, :set, .*)' cfg/fragments/$ENV.rb | sed 's/:logminer_early_limitation, :set, //g' | sed 's/)//g'`; fragmented_logminer_early_limitation=`echo $fragmented_logminer_early_limitation | tr -d '\047' | tr -d '\042'`
  fragmented_logminer_tracking_message=`grep -o ':logminer_tracking_message, :set, .*)' cfg/fragments/$ENV.rb | sed 's/:logminer_tracking_message, :set, //g' | sed 's/)//g'`; fragmented_logminer_tracking_message=`echo $fragmented_logminer_tracking_message | tr -d '\047' | tr -d '\042'`
  if [[ $fragmented_logminer_preferred_mode != '' ]]
  then
    logminer_preferred_mode=$fragmented_logminer_preferred_mode
  fi
  if [[ $fragmented_logminer_early_limitation != '' ]]
  then
    logminer_early_limitation=$fragmented_logminer_early_limitation
  fi
  if [[ $fragmented_logminer_tracking_message != '' ]]
  then
    logminer_tracking_message=$fragmented_logminer_tracking_message
  fi
else
  finalize
fi
if [[ $1 = '' ]]
then
  echo 'logminer n # take nifty log then tail'
  echo 'logminer c # have clean log then tail'
  echo 'logminer w # just watch log then tail'
  echo 'logminer e # show early log then tail'
else
  if [[ -d tmp/yankers ]]
  then
    if find tmp/yankers -mindepth 1 -print -quit | grep -q .
    then
      trap finalize SIGINT
      trap finalize SIGTERM
      trap finalize SIGKILL
      echo -e '\033c'
      if [[ $1 = 'n' ]]
      then
        if [[ $logminer_preferred_mode = ':clean' ]]
        then
          alternative_option='c'
        elif [[ $logminer_preferred_mode = ':watch' ]]
        then
          alternative_option='w'
        else
          alternative_option='e'
        fi
      fi
      if [[ $1 = 'c' || $alternative_option = 'c' ]]
      then
        rm -rf tmp/yankers/*
        riana resync
        if [[ $logminer_tracking_message != 'true' ]]
        then
          display_count='0'
        else
          display_count='3'
        fi
      elif [[ $1 = 'w' || $alternative_option = 'w' ]]
      then
        if [[ $logminer_tracking_message != 'true' ]]
        then
          display_count='0'
        else
          display_count='3'
        fi
      elif [[ $1 = 'e' || $alternative_option = 'e' ]]
      then
        if [[ $logminer_early_limitation = ':none' ]]
        then
          display_count='+1'
        else
          display_count=$logminer_early_limitation
        fi
      else
        finalize
      fi
      for file in tmp/yankers/*
      do
        log_file_name_full=$(basename $file)
        log_file_name_known=${log_file_name_full%.*}
        log_file_name_ext=${log_file_name_full##*.}
        log_file_line_num=`wc -l < $file`
        if [[ $log_file_line_num -le 10000 ]]
        then
          log_file_line_info='tiny'
        else
          log_file_line_info='huge'
        fi
        log_file_size_num=`wc -c < $file`
        if [[ $log_file_size_num -le 1000000 ]]
        then
          log_file_size_info='tiny'
        else
          log_file_size_info='huge'
        fi
        if [[ $logminer_tracking_message = 'true' ]]
        then
          echo '(LOGMINER) ('`date`') started monitoring '$log_file_name_known' '$log_file_name_ext' for changes' >> $file
          echo '(LOGMINER) ('`date`') currently contained '$log_file_line_info' lines with '$log_file_size_info' bytes' >> $file
          echo '(LOGMINER) ('`date`') username is '`whoami`' inside yanker directory' >> $file
        fi
      done
      echo -e '\033c'
      tail --lines=$display_count --follow --follow=name --retry tmp/yankers/* 2> /dev/null | sed 's/==> tmp\/yankers\//===== ===== ===== ===== /g;s/.log <==/ ===== ===== ===== =====/g;s/===== ===== ===== =====*.*===== ===== ===== =====/\x1b[40;5;240;96m&\x1b[0m/g'
    fi
  fi
fi
